package hu.bme.mit.yakindu.analysis.workhere;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.junit.Test;
import org.yakindu.sct.model.sgraph.State;
import org.yakindu.sct.model.sgraph.Statechart;
import org.yakindu.sct.model.sgraph.Transition;

import hu.bme.mit.model2gml.Model2GML;
import hu.bme.mit.yakindu.analysis.modelmanager.ModelManager;

public class Main {
	@Test
	public void test() {
		main(new String[0]);
	}
	
	public static void main(String[] args) {
		ModelManager manager = new ModelManager();
		Model2GML model2gml = new Model2GML();
		
		// Loading model
		EObject root = manager.loadModel("model_input/example.sct");
		
		// Reading model
		Statechart s = (Statechart) root;
		TreeIterator<EObject> iterator = s.eAllContents();
		int nev = 0;
		while (iterator.hasNext()) {
			EObject content = iterator.next();
			if(content instanceof State) {
				State state = (State) content;
	
				//nincs név
				if (state.getName() == "") {
					state.setName("NoName" + nev);
					nev++;
					System.out.println("Uj név: " + state.getName());
				}
				//csapda állapot-e
				if (state.getOutgoingTransitions().size() == 0) {
					System.out.println("Csapda állapot: " + state.getName());
					}
				
				//tranzakciók kiírása
				for (Transition transition : state.getOutgoingTransitions()) {
					State out = (State) transition.getTarget();
					if (out.getName() == "") {
						out.setName("NoName" + nev);
						nev++;
					}
					System.out.println(state.getName() + " -> " + out.getName());
				}
				
				//belső tranzakciók kiírása
				for(Transition transition : state.getIncomingTransitions()) {
					State in = (State) transition.getTarget();
					if (in.getName() == "") {
						in.setName("NoName" + nev);
						nev++;
					}
					System.out.println(state.getName() + " -> belso tranzakcio: " + in.getName());
				}
				
				System.out.println(state.getRegions().toString());

			}
		}
		
		// Transforming the model into a graph representation
		String content = model2gml.transform(root);
		// and saving it
		manager.saveFile("model_output/graph.gml", content);
	}
}
